import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import connectDB from '../src/lib/mongodb.js';
import User from '../src/models/User.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const MIGRATION_LOG_FILE = path.join(process.cwd(), 'migration-log.json');

async function migrateUsersToMongo() {
  try {
    console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON ‡πÑ‡∏õ MongoDB...');
    
    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
    try {
      await connectDB();
      console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (dbError) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡πÑ‡∏î‡πâ:', dbError.message);
      console.log('üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:');
      console.log('   - MongoDB service ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà');
      console.log('   - MONGODB_URI ‡πÉ‡∏ô .env.local ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà');
      console.log('   - ‡∏£‡∏±‡∏ô: docker run -d -p 27017:27017 --name engdev-mongodb mongo:latest');
      process.exit(1);
    }
    
    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON file
    const usersFilePath = path.join(process.cwd(), 'data', 'users.json');
    
    if (!fs.existsSync(usersFilePath)) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå users.json ‡∏ó‡∏µ‡πà data/users.json');
    }
    
    const usersData = JSON.parse(fs.readFileSync(usersFilePath, 'utf8'));
    
    console.log(`üìä ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${usersData.length} ‡∏Ñ‡∏ô`);
    
    const migrationResults = {
      total: usersData.length,
      successful: 0,
      failed: 0,
      skipped: 0,
      errors: []
    };
    
    // ‡πÇ‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏ô
    for (const userData of usersData) {
      try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ô MongoDB ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const existingUser = await User.findOne({ originalId: userData.id });
        
        if (existingUser) {
          console.log(`‚ö†Ô∏è  ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userData.loginName} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô MongoDB ‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ`);
          migrationResults.skipped++;
          continue;
        }
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô MongoDB
        const newUser = new User({
          originalId: userData.id,
          firstName: userData.firstName,
          lastName: userData.lastName,
          loginName: userData.loginName,
          department: userData.department,
          password: userData.password, // ‡πÉ‡∏ä‡πâ password ‡∏ó‡∏µ‡πà hash ‡πÅ‡∏•‡πâ‡∏ß
          profileImage: userData.profileImage || null,
          messageToRunners: userData.messageToRunners || '',
          runningExperience: userData.runningExperience || [],
          score: userData.score || 0,
          isActive: userData.isActive !== false, // default ‡πÄ‡∏õ‡πá‡∏ô true
          createdAt: userData.createdAt ? new Date(userData.createdAt) : new Date(),
          updatedAt: userData.updatedAt ? new Date(userData.updatedAt) : new Date(),
        });
        
        await newUser.save();
        migrationResults.successful++;
        console.log(`‚úÖ ‡πÇ‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢ ${userData.loginName} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        
      } catch (error) {
        migrationResults.failed++;
        migrationResults.errors.push({
          user: userData.loginName || userData.id,
          error: error.message
        });
        console.error(`‚ùå ‡πÇ‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢ ${userData.loginName} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:`, error.message);
      }
    }
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£ migration
    fs.writeFileSync(MIGRATION_LOG_FILE, JSON.stringify(migrationResults, null, 2));
    
    console.log('\nüìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
    console.log(`   ‡∏£‡∏ß‡∏°: ${migrationResults.total} ‡∏Ñ‡∏ô`);
    console.log(`   ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${migrationResults.successful} ‡∏Ñ‡∏ô`);
    console.log(`   ‡∏Ç‡πâ‡∏≤‡∏°: ${migrationResults.skipped} ‡∏Ñ‡∏ô`);
    console.log(`   ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${migrationResults.failed} ‡∏Ñ‡∏ô`);
    
    if (migrationResults.errors.length > 0) {
      console.log('\n‚ùå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:');
      migrationResults.errors.forEach(error => {
        console.log(`   - ${error.user}: ${error.error}`);
      });
    }
    
    console.log('\n‚úÖ ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    console.log(`üìÑ ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: ${MIGRATION_LOG_FILE}`);
    
    // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
    process.exit(1);
  }
}

// ‡∏£‡∏±‡∏ô migration
migrateUsersToMongo();
